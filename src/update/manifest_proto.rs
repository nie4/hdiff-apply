use serde::Serialize;

// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct SophonManifestProto {
    #[prost(message, repeated, tag = "1")]
    pub assets: ::prost::alloc::vec::Vec<AssetProperty>,
}
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct AssetProperty {
    #[prost(string, tag = "1")]
    pub asset_name: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub asset_size: i64,
    #[prost(string, tag = "3")]
    pub asset_hash_md5: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub asset_data: ::core::option::Option<AssetChunk>,
}
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct AssetChunk {
    #[prost(string, tag = "1")]
    pub latest_asset_version: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub assets: ::prost::alloc::vec::Vec<Asset>,
}
#[derive(Clone, PartialEq, ::prost::Message, Serialize)]
#[serde(rename_all = "PascalCase")]
pub struct Asset {
    #[prost(string, tag = "1")]
    pub chunk_file_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub chunk_file_version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub chunk_file_node: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub chunk_file_size: i64,
    #[prost(string, tag = "5")]
    pub chunk_file_md5: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub hdiff_file_in_chunk_offset: i64,
    #[prost(int64, tag = "7")]
    pub hdiff_file_size: i64,
    #[prost(string, tag = "8")]
    pub original_file_path: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub original_file_size: i64,
    #[prost(string, tag = "10")]
    pub original_file_md5: ::prost::alloc::string::String,
}
